import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, CallbackContext

TOKEN = "7578779316:AAFlnYQuVcYJDnEbawmNFRObrTEgc8KNq3k"  # –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞

# –ö–æ–ª–æ–¥–∞ –∫–∞—Ä—Ç
suits = ['‚ô•', '‚ô¶', '‚ô£', '‚ô†']
ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']
deck = [{'rank': rank, 'suit': suit} for suit in suits for rank in ranks]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ—á–∫–æ–≤
def calculate_score(cards):
    score = 0
    aces = 0
    for card in cards:
        if card['rank'] in ['J', 'Q', 'K']:
            score += 10
        elif card['rank'] == 'A':
            score += 11
            aces += 1
        else:
            score += int(card['rank'])
    while score > 21 and aces:
        score -= 10
        aces -= 1
    return score

# –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
async def start(update: Update, context: CallbackContext):
    if update.message is None:
        return

    user_id = update.message.from_user.id
    context.user_data[user_id] = {
        'deck': deck.copy(),
        'player_hand': [],
        'dealer_hand': []
    }

    random.shuffle(context.user_data[user_id]['deck'])

    # –†–∞–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã
    for _ in range(2):
        context.user_data[user_id]['player_hand'].append(context.user_data[user_id]['deck'].pop())
        context.user_data[user_id]['dealer_hand'].append(context.user_data[user_id]['deck'].pop())

    player_score = calculate_score(context.user_data[user_id]['player_hand'])

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞ –∏ –æ–¥–Ω—É –∫–∞—Ä—Ç—É –¥–∏–ª–µ—Ä–∞
    await update.message.reply_text(
        f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {', '.join([f'{card['rank']}{card['suit']}' for card in context.user_data[user_id]['player_hand']])}\n"
        f"–û—á–∫–∏: {player_score}\n\n"
        f"–ö–∞—Ä—Ç–∞ –¥–∏–ª–µ—Ä–∞: {context.user_data[user_id]['dealer_hand'][0]['rank']}{context.user_data[user_id]['dealer_hand'][0]['suit']}\n"
        f"–û—á–∫–∏ –¥–∏–ª–µ—Ä–∞: ?"
    )

    keyboard = [
        [InlineKeyboardButton("–í–∑—è—Ç—å –∫–∞—Ä—Ç—É", callback_data='hit')],
        [InlineKeyboardButton("–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ", callback_data='stand')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text('–ß—Ç–æ –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å?', reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: CallbackContext):
    query = update.callback_query
    if query is None:
        return

    user_id = query.from_user.id
    await query.answer()

    if user_id not in context.user_data:
        await query.edit_message_text("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start.")
        return

    if query.data == 'hit':
        context.user_data[user_id]['player_hand'].append(context.user_data[user_id]['deck'].pop())
        player_score = calculate_score(context.user_data[user_id]['player_hand'])

        if player_score > 21:
            await query.edit_message_text(
                f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {', '.join([f'{card['rank']}{card['suit']}' for card in context.user_data[user_id]['player_hand']])}\n"
                f"–û—á–∫–∏: {player_score}\n\n–ü–µ—Ä–µ–±–æ—Ä! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏."
            )
            del context.user_data[user_id]
        else:
            keyboard = [
                [InlineKeyboardButton("–í–∑—è—Ç—å –∫–∞—Ä—Ç—É", callback_data='hit')],
                [InlineKeyboardButton("–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ", callback_data='stand')]
            ]
            await query.edit_message_text(
                f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {', '.join([f'{card['rank']}{card['suit']}' for card in context.user_data[user_id]['player_hand']])}\n"
                f"–û—á–∫–∏: {player_score}\n\n"
                f"–ö–∞—Ä—Ç–∞ –¥–∏–ª–µ—Ä–∞: {context.user_data[user_id]['dealer_hand'][0]['rank']}{context.user_data[user_id]['dealer_hand'][0]['suit']}\n"
                f"–û—á–∫–∏ –¥–∏–ª–µ—Ä–∞: ?", reply_markup=InlineKeyboardMarkup(keyboard)
            )

    elif query.data == 'stand':
        while calculate_score(context.user_data[user_id]['dealer_hand']) < 17:
            context.user_data[user_id]['dealer_hand'].append(context.user_data[user_id]['deck'].pop())

        player_score = calculate_score(context.user_data[user_id]['player_hand'])
        dealer_score = calculate_score(context.user_data[user_id]['dealer_hand'])

        if dealer_score > 21 or player_score > dealer_score:
            result = "–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! üéâ"
        elif player_score == dealer_score:
            result = "–ù–∏—á—å—è! ü§ù"
        else:
            result = "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. üòû"

        await query.edit_message_text(
            f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {', '.join([f'{card['rank']}{card['suit']}' for card in context.user_data[user_id]['player_hand']])}\n"
            f"–û—á–∫–∏: {player_score}\n\n"
            f"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: {', '.join([f'{card['rank']}{card['suit']}' for card in context.user_data[user_id]['dealer_hand']])}\n"
            f"–û—á–∫–∏ –¥–∏–ª–µ—Ä–∞: {dealer_score}\n\n"
            f"{result}"
        )

        del context.user_data[user_id]

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    app.run_polling()

if __name__ == "__main__":
    main()
